<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>documentation on try Code</title>
    <link>https://trycombine.com/tags/documentation/</link>
    <description>Recent content in documentation on try Code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://trycombine.com/tags/documentation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DocC: Project documentation structure</title>
      <link>https://trycombine.com/posts/an-example-docc-documentation-for-an-ios-app/</link>
      <pubDate>Wed, 20 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://trycombine.com/posts/an-example-docc-documentation-for-an-ios-app/</guid>
      <description>This post is about structuring the documentation for a project with Swift DocC. (Apple&amp;rsquo;s intro to Swift DocC)
Swift DocC in Xcode automatically builds project documentation following the structure of the app&amp;rsquo;s code hierarchy. Additionally, DocC allows you to create custom curation and hierarchy to improve the discoverability and the user experience of said documentation.
Bellow I&amp;rsquo;ll suggest a simple documentation hierarchy for apps or packages, especially in the context of a larger team or organization.</description>
    </item>
    
  </channel>
</rss>
