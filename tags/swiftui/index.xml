<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SwiftUI on try Code</title>
    <link>https://trycombine.com/tags/swiftui/</link>
    <description>Recent content in SwiftUI on try Code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://trycombine.com/tags/swiftui/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Unxippity - fast Xcode unxipping, is open source</title>
      <link>https://trycombine.com/posts/an-app-experiment-about-unxipping-xcode-goes-to-github/</link>
      <pubDate>Fri, 29 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://trycombine.com/posts/an-app-experiment-about-unxipping-xcode-goes-to-github/</guid>
      <description>Few weeks ago I had few free hours and hacked together a quick SwiftUI app that uses saagar&amp;rsquo;s unxip package to quickly unxip Xcode downloads.
You can use saagar&amp;rsquo;s command line utility but I&amp;rsquo;m one for neat UIs so I wanted to have something to click around. Today I wrapped few loose ends and pushed the code to GitHub here: icanzilb/Unxippity.
Here&amp;rsquo;s a very quick walkthrough the app.
Note: This is a very quickly put together app experiment, use caution when using it.</description>
    </item>
    
    <item>
      <title>Easy app walkthroughs with MarkWalkthrough</title>
      <link>https://trycombine.com/posts/a-fun-swiftui-package-for-creating-walkthroughs/</link>
      <pubDate>Mon, 04 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://trycombine.com/posts/a-fun-swiftui-package-for-creating-walkthroughs/</guid>
      <description>Some time ago, while I was working on my app Rex Tables, I wrote some quick code that reads a Markdown file with some &amp;ldquo;slide&amp;rdquo; data and automatically displays an app walkthrough.
It wasn&amp;rsquo;t really meant for other people to use since it made use of a paid Swift package for the transition effects in the walkthrough. But that package, namely Pow, just become open sourced last week!
So I pulled the code out of Rex Tables and did a quick pass to tighten up a couple of things and pushed it to GitHub.</description>
    </item>
    
    <item>
      <title>Automate debugging SwiftUI and UIKit with dataFude</title>
      <link>https://trycombine.com/posts/code-samples-on-how-to-approach-debugging-swift-and-uikit-apps/</link>
      <pubDate>Tue, 03 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://trycombine.com/posts/code-samples-on-how-to-approach-debugging-swift-and-uikit-apps/</guid>
      <description>The ability to log values and visualize them in dataFude is quite powerful, but the core concept of the app really shines when a developer automates logs that drive metrics over time.
Such metrics could be any value that changes over time, such as the size of the app cache, the amount of RAM consumed, or the number of instances created of a given class.
This article will look at two quite different approaches to tracking automation, one with SwiftUI and another with UIKit.</description>
    </item>
    
    <item>
      <title>Custom SwiftUI view modifier for paid app features</title>
      <link>https://trycombine.com/posts/custom-view-modifier-to-handle-features-that-are-only-enabled-in-the-pro-version-of-the-app/</link>
      <pubDate>Mon, 05 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://trycombine.com/posts/custom-view-modifier-to-handle-features-that-are-only-enabled-in-the-pro-version-of-the-app/</guid>
      <description>In my app dataFude for Simulator I&amp;rsquo;ve decided to offer some features for free and others only to users who pay for the app.
This way, everyone including students and hobbyist can meaningfully use the app, while professional users can support the development.
I considered few different approaches including compiling two separate versions of the app, but ultimately went for shipping a single binary that relies on RevenueCat and enables/disables some parts of the UI depending on the purchase status.</description>
    </item>
    
  </channel>
</rss>
