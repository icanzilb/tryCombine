<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>taskgroup on try Code</title>
    <link>https://trycombine.com/tags/taskgroup/</link>
    <description>Recent content in taskgroup on try Code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 21 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://trycombine.com/tags/taskgroup/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TaskGroup as a workflow design tool</title>
      <link>https://trycombine.com/posts/swift-concurrency-task-group-workflow/</link>
      <pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://trycombine.com/posts/swift-concurrency-task-group-workflow/</guid>
      <description>For my talk at iOS Conf SG 2022 I wanted to showcase some Swift concurrency use-cases that don&amp;rsquo;t fall into the common scenarios. Revisiting the slides some weeks later, I think it&amp;rsquo;d be fun to cover my TaskGroup example in more detail.
In this post I&amp;rsquo;ll show how to use TaskGroup to design a complete (but ficitional) user login-sequence.
What is TaskGroup good for? Most examples floating around show using a TaskGroup to add a number of identical tasks to a group and execute them concurrently.</description>
    </item>
    
    <item>
      <title>The issue with task groups or how I discovered a solved problem</title>
      <link>https://trycombine.com/posts/swift-concurrency-task-group/</link>
      <pubDate>Wed, 16 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://trycombine.com/posts/swift-concurrency-task-group/</guid>
      <description>This post is not my usual format but there is a moral at the end, so hang around if you have a little time to waste.
The setup I&amp;rsquo;m working on a longer blog post about the process of optimizing some concurrency Swift code. At a point I used John Sundell&amp;rsquo;s CollectionConcurrencyKit to compare the performance of different approaches.
After I had my numbers, I peaked into his code to double check what exactly am I measuring.</description>
    </item>
    
  </channel>
</rss>
