<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>await on try Code</title>
    <link>https://trycombine.com/tags/await/</link>
    <description>Recent content in await on try Code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 21 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://trycombine.com/tags/await/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Swift Async Sequence extensions (part 2)</title>
      <link>https://trycombine.com/posts/swift-async-sequence-extensions-2/</link>
      <pubDate>Fri, 21 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://trycombine.com/posts/swift-async-sequence-extensions-2/</guid>
      <description>In Swift Async Sequence extensions (part 1) I covered simple ways to create an async sequence using a custom factory method and binding a sequence to a UI control via a custom assign method.
This covered the &amp;ldquo;beginning&amp;rdquo; and &amp;ldquo;end&amp;rdquo; of the data stream (so to say) but what about processing or converting the data along the way? If you draw a parallel to Combine code — how would you build custom &amp;ldquo;operators&amp;rdquo; for your async sequence?</description>
    </item>
    
    <item>
      <title>Swift Async Sequence extensions (part 1)</title>
      <link>https://trycombine.com/posts/swift-async-sequence-extensions-1/</link>
      <pubDate>Wed, 19 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://trycombine.com/posts/swift-async-sequence-extensions-1/</guid>
      <description>I&amp;rsquo;ve been trying out various ways to extend and build upon the currently available Concurrency APIs introduced in Swift 5.5
I believe the Concurrency APIs are intentionally somewhat minimal so that developers would intentionally fall back on Combine for complex tasks. Maybe I&amp;rsquo;m right or wrong but I can see how a lot of people will want to extend the Concurrency APIs to suit better their current tasks.
In this post I&amp;rsquo;ll code a couple of extensions that show how to easily build your own concurrent power-ups.</description>
    </item>
    
    <item>
      <title>Announcing: “Modern Concurrency in Swift”</title>
      <link>https://trycombine.com/posts/announcing-modern-swift-concurrency-book/</link>
      <pubDate>Wed, 03 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://trycombine.com/posts/announcing-modern-swift-concurrency-book/</guid>
      <description>I&amp;rsquo;m incredibly happy to share that today the new raywenderlich.com book &amp;ldquo;Modern Concurrency in Swift&amp;rdquo;, that I&amp;rsquo;ve been working on, is available at swiftconcurrencybook.com!
Together with editors Sandra Grauschopf, Felipe Laso-Marsetti, Richard Turton, and Shai Mishali, we&amp;rsquo;ve been working very hard to get a book out as soon as possible on the newly released in 2021 Swift Concurrency:
 The book is written in the classic raywenderlich.com style that mixes key pieces of theory with step-by-step instructions, guiding the readers through working on practical, real-life projects.</description>
    </item>
    
  </channel>
</rss>
