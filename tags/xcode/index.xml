<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>xcode on try Code</title>
    <link>https://trycombine.com/tags/xcode/</link>
    <description>Recent content in xcode on try Code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://trycombine.com/tags/xcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Unxippity - fast Xcode unxipping, is open source</title>
      <link>https://trycombine.com/posts/an-app-experiment-about-unxipping-xcode-goes-to-github/</link>
      <pubDate>Fri, 29 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://trycombine.com/posts/an-app-experiment-about-unxipping-xcode-goes-to-github/</guid>
      <description>Few weeks ago I had few free hours and hacked together a quick SwiftUI app that uses saagar&amp;rsquo;s unxip package to quickly unxip Xcode downloads.
You can use saagar&amp;rsquo;s command line utility but I&amp;rsquo;m one for neat UIs so I wanted to have something to click around. Today I wrapped few loose ends and pushed the code to GitHub here: icanzilb/Unxippity.
Here&amp;rsquo;s a very quick walkthrough the app.
Note: This is a very quickly put together app experiment, use caution when using it.</description>
    </item>
    
    <item>
      <title>Extending Xcode with power-ups</title>
      <link>https://trycombine.com/posts/xcode-powerups/</link>
      <pubDate>Mon, 20 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://trycombine.com/posts/xcode-powerups/</guid>
      <description>In this post I describe the technical setup of a small language experiment I developed to aid myself working on custom Xcode instruments.
The need for a more flexible coding inside Xcode Last month, I prototyped a Swift IDE and became very interested in enhancing the experience of building with Swift. (Since Apple doesn&amp;rsquo;t hire remotely, I wonder what other companies are working in that area?)
A little later, I came back to updating my custom Xcode Instrument called Timelane to support debugging new code based on the new Swift modern concurrency APIs:</description>
    </item>
    
  </channel>
</rss>
